{"version":3,"sources":["dll/loginApi.ts","bll/login-reducer.ts","components/login/LoginForm.tsx","components/login/Login.tsx","dll/registerApi.ts","bll/registration-reducer.ts","components/registration/RegisterForm.tsx","components/registration/Registration.tsx","dll/todolistsApi.ts","bll/todolists-reducer.ts","components/utils/ModalTodo.tsx","components/utils/ModalAddTodo.tsx","components/utils/ModalUpdateTodo.tsx","components/todolists/TodolistsList.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","loginAPI","data","post","initialState","username","id","jwt","isLogin","setIsLoginAC","value","type","useStyles","makeStyles","theme","input","backgroundColor","LoginForm","dispatch","useDispatch","formik","useFormik","initialValues","identifier","password","validate","values","errors","onSubmit","then","res","code","alert","message","user","localStorage","setItem","catch","error","resetForm","classes","Grid","container","justify","item","xs","handleSubmit","FormControl","FormGroup","TextField","inputProps","className","placeholder","margin","name","onChange","handleChange","onBlur","handleBlur","touched","style","color","Button","variant","Login","useSelector","state","login","to","maxWidth","marginTop","textDecoration","authAPI","isRegistered","RegistrationForm","email","repeatPassword","test","length","confirmed","fullWidth","Registration","history","useHistory","padding","onClick","goBack","headers","Authorization","getItem","todolistsAPI","get","Modal","enableBackground","backgroundStyle","backgroundOnClick","width","height","modalStyle","modalOnClick","show","children","top","left","position","background","opacity","zIndex","display","flexFlow","alignItems","justifyContent","ModalAddTodo","props","useId","task","isDone","todo","setShow","todolist","console","log","direction","spacing","label","map","index","TextareaAutosize","minRows","getFieldProps","setFieldValue","ModalUpdateTodo","todolists","filter","f","todolistID","TodolistsList","useState","showAddTodo","setShowAddTodo","showUpdateTodo","setShowUpdateTodo","currentTodo","setCurrentTodo","isLoggedIn","useEffect","addTodoHandler","useCallback","updateTodoHandler","tl","borderRadius","cursor","published_at","bottom","fontSize","right","App","AppBar","Toolbar","IconButton","aria-label","removeItem","Container","exact","path","render","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","registration","action","todos","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9958df0c.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        'https://recruitment.ultimate.systems'\r\n});\r\n\r\n\r\nexport const loginAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginResponseType>('/auth/local/', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<ResponseMeType>>('/auth/local/');\r\n    }\r\n};\r\nexport type LoginParamsType = {\r\n    identifier: string\r\n    password: string\r\n}\r\n\r\ntype LoginResponseType = {\r\n    user: UserType,\r\n    code: number,\r\n    message: string\r\n    jwt: string\r\n}\r\n\r\ntype UserType = {\r\n    \"id\": number,\r\n    \"username\": string,\r\n    \"email\": string,\r\n    \"provider\": string,\r\n    \"confirmed\": boolean,\r\n    \"created_at\": Date,\r\n    \"updated_at\": Date\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {loginAPI, LoginParamsType} from \"../dll/loginApi\";\r\n\r\nconst initialState = {\r\n    username: \"\",\r\n    id: 0,\r\n    jwt: \"\",\r\n    isLogin: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGIN':\r\n            return {...state, username: action.username, id: action.id, isLogin: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoginAC = (username: string, id: number, value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGIN', username, id, value } as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    loginAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.code === 0) {\r\n                alert(res.data.message)\r\n            }\r\n            dispatch(setIsLoginAC(res.data.user.username, res.data.user.id, true ))\r\n            localStorage.setItem(\"token\", res.data.jwt)\r\n        })\r\n        .catch((error) => {\r\n            alert(error)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n            dispatch(setIsLoginAC( \"\",0,false ))\r\n            localStorage.removeItem(\"token\")\r\n        }\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoginAC>\r\n\r\n\r\n","import React from 'react';\r\nimport {Button, FormControl, FormGroup, Grid, makeStyles, TextField} from \"@material-ui/core\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../../bll/login-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    identifier?: string\r\n    password?: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    input: {\r\n        backgroundColor: \"white\",\r\n    },\r\n}));\r\n\r\nexport const LoginForm = () => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            identifier: '',\r\n            password: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.identifier) {\r\n                errors.identifier = 'Required';\r\n            }\r\n\r\n            if(!values.password) {\r\n                errors.password = 'Required';\r\n            }\r\n            return errors;\r\n\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n\r\n        },\r\n    })\r\n\r\n    const classes = useStyles();\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            inputProps={{ className: classes.input }}\r\n                            placeholder=\"Username or email\"\r\n                            margin=\"normal\"\r\n                            name=\"identifier\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.identifier}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.identifier && formik.errors.identifier && <div style={{color: 'red'}}>{formik.errors.identifier}</div>}\r\n\r\n                        <TextField\r\n                            inputProps={{ className: classes.input }}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            margin=\"normal\"\r\n                            name=\"password\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.password}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <Button type={'submit'} variant={'contained'} style={{backgroundColor: 'orange', color: 'white'}}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {LoginForm} from \"./LoginForm\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.login.isLogin)\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\" style={{backgroundColor: \"rgb(45, 45, 45)\", maxWidth: 890, marginTop: 200}}>\r\n        <Grid item xs={4}>\r\n            <h2 style={{color: 'orange'}}>Login</h2>\r\n            <LoginForm/>\r\n            <div>\r\n                <span>or</span>\r\n                <NavLink to={\"/registration\"} style={{color: 'orange', textDecoration: \"none\"}}><h3>create an\r\n                    account</h3></NavLink>\r\n            </div>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        'https://recruitment.ultimate.systems'\r\n});\r\n\r\n\r\nexport const authAPI = {\r\n    register(data: RegisterParamsType) {\r\n        return instance.post<RegisterResponseType>('/auth/local/register', data);\r\n    }\r\n};\r\nexport type RegisterParamsType = {\r\n    username: string\r\n    email: string\r\n    password: string\r\n}\r\n\r\ntype RegisterResponseType = {\r\n    \"id\": string,\r\n    \"username\": string,\r\n    \"email\": string,\r\n    \"provider\": string,\r\n    \"confirmed\": boolean,\r\n    \"blocked\": boolean,\r\n    \"role\": {\r\n        \"id\": string,\r\n        \"name\": string,\r\n        \"description\": string,\r\n        \"type\": string,\r\n        \"permissions\": [\r\n            string\r\n        ],\r\n        \"users\": [\r\n            string\r\n        ],\r\n        \"created_by\": string,\r\n        \"updated_by\": string\r\n    },\r\n    \"to_do_lists\": [\r\n        {\r\n            \"id\": string\r\n            \"name\": string\r\n            \"task\": any,\r\n            \"user\": string,\r\n            \"published_at\": string,\r\n            \"created_by\": string,\r\n            \"updated_by\": string\r\n        }\r\n    ]\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { Dispatch } from 'redux'\r\nimport {authAPI, RegisterParamsType} from \"../dll/registerApi\";\r\n\r\nconst initialState = {\r\n    isRegistered: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'register/SET-IS-REGISTERED':\r\n            return {...state, isRegistered: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsRegisteredAC = (value: boolean) =>\r\n    ({type: 'register/SET-IS-REGISTERED', value} as const)\r\n\r\n// thunks\r\nexport const registerTC = (data: RegisterParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    authAPI.register(data)\r\n        .then(res => {\r\n            if (res.data.confirmed === true) {\r\n                dispatch(setIsRegisteredAC(true))\r\n\r\n            } else {\r\n                alert(res.data);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            alert(error)\r\n        })\r\n\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsRegisteredAC>\r\n\r\n\r\n","import React from 'react'\r\nimport {FormControl, FormGroup, FormLabel, TextField, Button, Grid, makeStyles} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {registerTC} from \"../../bll/registration-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    username?: string\r\n    email?: string\r\n    password?: string\r\n    repeatPassword?: string\r\n\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    input: {\r\n        backgroundColor: \"white\",\r\n    },\r\n}));\r\n\r\nexport const RegistrationForm = () => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if(!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            if(values.password !==values.repeatPassword) {\r\n                errors.repeatPassword = 'The password does not match';\r\n            }\r\n            return errors;\r\n\r\n\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            dispatch(registerTC({username:values.username, email: values.email, password: values.password}))\r\n        },\r\n    })\r\n\r\n    const classes = useStyles();\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            inputProps={{ className: classes.input }}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            placeholder=\"Username\"\r\n                            margin=\"normal\"\r\n                            name=\"username\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.username}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            inputProps={{ className: classes.input }}\r\n                            placeholder=\"Email\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            name=\"email\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.email}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            inputProps={{ className: classes.input }}\r\n                            type=\"password\"\r\n                            placeholder=\"password\"\r\n                            margin=\"normal\"\r\n                            name=\"password\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.password}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <TextField\r\n                            inputProps={{ className: classes.input }}\r\n                            type=\"password\"\r\n                            placeholder=\"repeat password\"\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"repeatPassword\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.repeatPassword}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.repeatPassword && formik.errors.repeatPassword && <div style={{color: 'red'}}>{formik.errors.repeatPassword}</div>}\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Create</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {Grid} from \"@material-ui/core\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {RegistrationForm} from \"./RegisterForm\";\r\n\r\nexport const Registration = () => {\r\n    let history = useHistory();\r\n    return (\r\n        <Grid container justify=\"center\" style={{backgroundColor: \"rgb(45, 45, 45)\", maxWidth: 890, marginTop: 200, padding: 10}}>\r\n            <Grid item xs={4}>\r\n                <button onClick={() => history.goBack()}>Back</button>\r\n                <h2 style={{color: 'orange'}}>Create an new account:</h2>\r\n                <RegistrationForm/>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n}\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        'https://recruitment.ultimate.systems',\r\n    headers: {\r\n        Authorization: \"Bearer \" + localStorage.getItem('token')\r\n    }\r\n});\r\n\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('/to-do-lists', );\r\n    },\r\n    createTodolist(data: CreateTodoType) {\r\n        return instance.post<TodolistType>('to-do-lists', data);\r\n    },\r\n\r\n};\r\nexport type ToDosRequestParamsType = {\r\n    _limit?: number,\r\n    _sort?: string,\r\n    _start?: number,\r\n    \"=\"?: string,\r\n    _ne?: string,\r\n    _lt?: string,\r\n    _lte?: string,\r\n    _gt?: string,\r\n    _gte?: string,\r\n    _contains?: string,\r\n    _in?: Array<string>,\r\n    _nin?: Array<string>,\r\n}\r\n\r\nexport type CreateTodoType = {\r\n    \"name\": string,\r\n    \"task\": TaskType[]\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    name: string\r\n    user: string\r\n    published_at: Date\r\n    created_by: string\r\n    updated_by: string\r\n    task: TaskType[]\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    name: string,\r\n    isDone: boolean\r\n}\r\n\r\n\r\n\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport {CreateTodoType, todolistsAPI, TodolistType} from \"../dll/todolistsApi\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> =>  {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(todos => ({...todos}))\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist}, ...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (todo: CreateTodoType) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        todolistsAPI.createTodolist(todo)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data))\r\n            })\r\n    }\r\n}\r\n// types\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type AddTodolistsActionType = ReturnType<typeof addTodolistAC>;\r\ntype ActionsType = SetTodolistsActionType | AddTodolistsActionType\r\nexport type TodolistDomainType = TodolistType\r\n//     & {\r\n//\r\n//     entityStatus: RequestStatusType\r\n// }\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n","import React, {CSSProperties} from \"react\";\r\n\r\ninterface IModal {\r\n    enableBackground?: boolean;\r\n    backgroundStyle?: CSSProperties;\r\n    backgroundOnClick?: () => void;\r\n\r\n    width: number;\r\n    height: number;\r\n    modalStyle?: CSSProperties;\r\n    modalOnClick?: () => void;\r\n\r\n    show: boolean\r\n}\r\n\r\nexport const Modal: React.FC<IModal> = (\r\n    {\r\n        enableBackground,\r\n        backgroundStyle,\r\n        backgroundOnClick = () => {},\r\n\r\n        width,\r\n        height,\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n\r\n        show,\r\n        children,\r\n    }\r\n) => {\r\n    const top = `calc(50vh - ${height / 2}px)`;\r\n    const left = `calc(50vw - ${width / 2}px)`;\r\n\r\n    if (!show) return null;\r\n\r\n    return (\r\n        <>\r\n            {enableBackground && <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    top: '0px',\r\n                    left: '0px',\r\n                    width: '100vw',\r\n                    height: '100vh',\r\n\r\n                    background: 'black',\r\n                    opacity: 0.35,\r\n                    zIndex: 20,\r\n\r\n                    ...backgroundStyle,\r\n                }}\r\n                onClick={backgroundOnClick}\r\n            />}\r\n            <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    top,\r\n                    left,\r\n                    width,\r\n                    height,\r\n                    display: 'flex',\r\n                    flexFlow: 'column',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    padding: 20,\r\n                    background: 'mintcream',\r\n                    zIndex: 21,\r\n\r\n                    ...modalStyle,\r\n                }}\r\n                onClick={modalOnClick}\r\n            >\r\n                {children}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React, {useCallback} from \"react\";\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, TextField, TextareaAutosize} from \"@material-ui/core\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik, Field, FormikProvider} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Modal} from \"./ModalTodo\";\r\nimport {addTodolistTC, TodolistDomainType} from \"../../bll/todolists-reducer\";\r\nimport useId from \"react-id-generator\";\r\n\r\ntype PropsType = {\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n}\r\n\r\n\r\ntype FormikErrorType = {\r\n    name?: string\r\n}\r\n\r\n\r\nexport const ModalAddTodo = (props: PropsType) => {\r\n    const dispatch = useDispatch();\r\n    const taskId = useId();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            task: [\r\n                {\r\n                    id: \"\",\r\n                    name: \"\",\r\n                    isDone: false,\r\n                },\r\n            ],\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.name) {\r\n                errors.name = 'name is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            props.setShow(false)\r\n            dispatch(addTodolistTC(values))\r\n            console.log(values)\r\n            formik.resetForm();\r\n        },\r\n    });\r\n    const handleNewField = () => {\r\n        formik.setFieldValue(\"task\", [\r\n            ...formik.values.task,\r\n            {id: \"\", name: \"\", isDone: false},\r\n        ]);\r\n    };\r\n\r\n\r\n    return (\r\n        <Modal\r\n            height={800}\r\n            width={880}\r\n            backgroundOnClick={() => props.setShow(false)}\r\n            enableBackground={true}\r\n            show={props.show}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormikProvider value={formik}>\r\n                    <FormControl>\r\n                        <FormGroup>\r\n                            <Grid container direction='column' spacing={1} alignItems='center'>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        label=\"List name\"\r\n                                        margin=\"normal\"\r\n                                        name=\"name\"\r\n                                        onChange={formik.handleChange}\r\n                                        value={formik.values.name}\r\n                                        onBlur={formik.handleBlur}/>\r\n                                    {formik.touched.name && formik.errors.name ?\r\n                                        <div style={{color: \"blue\"}}>{formik.errors.name}</div> : null}\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    {formik.values.task.map((task, index) => (\r\n                                        <Grid item key={index}>\r\n                                            <label>\r\n                                                <Field type=\"checkbox\" name={`task[${index}].isDone`}/>\r\n                                            </label>\r\n                                            <TextareaAutosize minRows={1} placeholder=\"Task name\"\r\n                                                              {...formik.getFieldProps(`task[${index}].name`)}/>\r\n\r\n                                        </Grid>\r\n                                    ))}\r\n                                </Grid>\r\n                                <Grid container direction={'row'} justifyContent={\"space-between\"}>\r\n                                    <Grid item>\r\n                                        <Button variant={'contained'}\r\n                                                color={'secondary'}>Cancel</Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button variant={'contained'}\r\n                                                color={'primary'} onClick={handleNewField}>Add</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Grid container direction={'row'} justifyContent={\"space-between\"}>\r\n                                    <Grid item>\r\n                                        <Button variant={'contained'} color={'secondary'}>Cancel</Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button type={'submit'} variant={'contained'} color={'primary'}>Save</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </FormikProvider>\r\n            </form>\r\n\r\n        </Modal>\r\n    )\r\n\r\n};\r\n","import React, {useCallback} from \"react\";\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, TextField, TextareaAutosize} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik, Field, FormikProvider} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Modal} from \"./ModalTodo\";\r\nimport {addTodolistTC, TodolistDomainType} from \"../../bll/todolists-reducer\";\r\nimport useId from \"react-id-generator\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\n\r\ntype PropsType = {\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    todolistID: string\r\n}\r\n\r\n\r\ntype FormikErrorType = {\r\n    name?: string\r\n}\r\n\r\n\r\nexport const ModalUpdateTodo = (props: PropsType) => {\r\n    const todolist = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists.filter(f => f.id === props.todolistID))\r\n    console.log(todolist)\r\n\r\n\r\n\r\n    return (\r\n        <Modal\r\n            height={800}\r\n            width={880}\r\n            backgroundOnClick={() => props.setShow(false)}\r\n            enableBackground={true}\r\n            show={props.show}>\r\n           <>{todolist[0].name}</>\r\n           <>{todolist[0].name}</>\r\n\r\n        </Modal>\r\n    )\r\n\r\n};\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport {fetchTodolistsTC, TodolistDomainType} from \"../../bll/todolists-reducer\";\r\nimport {ModalAddTodo} from \"../utils/ModalAddTodo\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {ModalUpdateTodo} from \"../utils/ModalUpdateTodo\";\r\n\r\nexport const TodolistsList = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const [showAddTodo, setShowAddTodo] = useState(false);\r\n    const [showUpdateTodo, setShowUpdateTodo] = useState(false);\r\n    const [currentTodo, setCurrentTodo] = useState(\"todoId\");\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.login.isLogin)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC());\r\n    }, [dispatch])\r\n\r\n\r\n    const addTodoHandler = useCallback(() => {\r\n        setShowAddTodo(true)\r\n    }, [])\r\n    const updateTodoHandler = useCallback((id: string) => {\r\n        setCurrentTodo(id);\r\n        setShowUpdateTodo(true)\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    console.log(todolists)\r\n\r\n    return <>\r\n        <input type={\"text\"}/>\r\n        <button>Sort by</button>\r\n        <Grid container spacing={1} direction=\"column\">\r\n            {todolists.map(tl => {\r\n                return <Grid container key={tl.id} style={{backgroundColor: \"grey\",\r\n                    borderRadius: 8, color: 'white', margin: 4, padding: 18, cursor: \"pointer\"}}\r\n                             direction={\"row\"} justifyContent={\"space-between\"}\r\n                             onClick={() => updateTodoHandler(tl.id)}\r\n                >\r\n                    <Grid item>{tl.name}</Grid>\r\n                    <Grid item>Created at: {tl.published_at}</Grid>\r\n                    <Grid item>Completed: {tl.task.filter(f => f.isDone === true).length} Uncompleted: {tl.task.filter(f => f.isDone === false).length} All: {tl.task.length + 1}</Grid>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n        <AddIcon style={{position: \"sticky\", bottom: 10, cursor: \"pointer\", borderRadius: 50, fontSize: 40,\r\n            right: 10, backgroundColor: \"white\", color: 'orange', margin: 4, padding: 18}}onClick={() => addTodoHandler()}>\r\n            Add</AddIcon>\r\n        {showAddTodo &&\r\n        <ModalAddTodo\r\n            show={showAddTodo} setShow={setShowAddTodo}\r\n        />}\r\n        {showUpdateTodo &&\r\n        <ModalUpdateTodo\r\n            show={showUpdateTodo} setShow={setShowUpdateTodo} todolistID={currentTodo}\r\n        />}\r\n\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"./components/login/Login\";\r\nimport {Registration} from \"./components/registration/Registration\";\r\nimport {TodolistsList} from \"./components/todolists/TodolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./bll/store\";\r\nimport {logoutTC} from \"./bll/login-reducer\";\r\n\r\n\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>\r\n        state.login.isLogin)\r\n    const loggoutHendler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\" style={{backgroundColor: \"black\", justifyContent: \"center\", alignItems: 'center'}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{backgroundColor: \"black\"}}>\r\n                    {isLoggedIn && <IconButton style={{color: \"orange\", position: \"absolute\",top: 0, right: 4}} aria-label=\"logout\">\r\n                        <ExitToAppIcon onClick={loggoutHendler}/>\r\n                    </IconButton>}\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container style={{backgroundColor: \"black\",display:\"flex\", justifyContent: \"center\", alignItems: 'center'}}>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/registration'} render={() => <Registration/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {registrationReducer} from \"./registration-reducer\";\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    registration: registrationReducer,\r\n    login: loginReducer,\r\n    todolists: todolistsReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {store} from \"./bll/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}